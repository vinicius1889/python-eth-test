# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libin3p')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libin3p')
    _libin3p = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libin3p', [dirname(__file__)])
        except ImportError:
            import _libin3p
            return _libin3p
        try:
            _mod = imp.load_module('_libin3p', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libin3p = swig_import_helper()
    del swig_import_helper
else:
    import _libin3p
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def in3_create():
    return _libin3p.in3_create()
in3_create = _libin3p.in3_create

def in3_send(c, method, params, result, error):
    return _libin3p.in3_send(c, method, params, result, error)
in3_send = _libin3p.in3_send

def in3_dispose(a):
    return _libin3p.in3_dispose(a)
in3_dispose = _libin3p.in3_dispose

def init_client(c):
    return _libin3p.init_client(c)
init_client = _libin3p.init_client

def in3_raw_rpc(c, method, params, wrapper):
    return _libin3p.in3_raw_rpc(c, method, params, wrapper)
in3_raw_rpc = _libin3p.in3_raw_rpc
class WrapperCall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapperCall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WrapperCall, name)
    __repr__ = _swig_repr
    __swig_setmethods__["request"] = _libin3p.WrapperCall_request_set
    __swig_getmethods__["request"] = _libin3p.WrapperCall_request_get
    if _newclass:
        request = _swig_property(_libin3p.WrapperCall_request_get, _libin3p.WrapperCall_request_set)
    __swig_setmethods__["success"] = _libin3p.WrapperCall_success_set
    __swig_getmethods__["success"] = _libin3p.WrapperCall_success_get
    if _newclass:
        success = _swig_property(_libin3p.WrapperCall_success_get, _libin3p.WrapperCall_success_set)
    __swig_setmethods__["result"] = _libin3p.WrapperCall_result_set
    __swig_getmethods__["result"] = _libin3p.WrapperCall_result_get
    if _newclass:
        result = _swig_property(_libin3p.WrapperCall_result_get, _libin3p.WrapperCall_result_set)
    __swig_setmethods__["result_code"] = _libin3p.WrapperCall_result_code_set
    __swig_getmethods__["result_code"] = _libin3p.WrapperCall_result_code_get
    if _newclass:
        result_code = _swig_property(_libin3p.WrapperCall_result_code_get, _libin3p.WrapperCall_result_code_set)
    __swig_setmethods__["debug"] = _libin3p.WrapperCall_debug_set
    __swig_getmethods__["debug"] = _libin3p.WrapperCall_debug_get
    if _newclass:
        debug = _swig_property(_libin3p.WrapperCall_debug_get, _libin3p.WrapperCall_debug_set)

    def __init__(self):
        this = _libin3p.new_WrapperCall()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_WrapperCall
    __del__ = lambda self: None
WrapperCall_swigregister = _libin3p.WrapperCall_swigregister
WrapperCall_swigregister(WrapperCall)

class rpc_response(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rpc_response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rpc_response, name)
    __repr__ = _swig_repr
    __swig_setmethods__["content"] = _libin3p.rpc_response_content_set
    __swig_getmethods__["content"] = _libin3p.rpc_response_content_get
    if _newclass:
        content = _swig_property(_libin3p.rpc_response_content_get, _libin3p.rpc_response_content_set)
    __swig_setmethods__["is_ok"] = _libin3p.rpc_response_is_ok_set
    __swig_getmethods__["is_ok"] = _libin3p.rpc_response_is_ok_get
    if _newclass:
        is_ok = _swig_property(_libin3p.rpc_response_is_ok_get, _libin3p.rpc_response_is_ok_set)

    def __init__(self):
        this = _libin3p.new_rpc_response()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_rpc_response
    __del__ = lambda self: None
rpc_response_swigregister = _libin3p.rpc_response_swigregister
rpc_response_swigregister(rpc_response)

IN3_ERR_INVALID_JSON = _libin3p.IN3_ERR_INVALID_JSON
IN3_ERR_BUFFER_TOO_SMALL = _libin3p.IN3_ERR_BUFFER_TOO_SMALL
IN3_ERR_REQUEST_INVALID = _libin3p.IN3_ERR_REQUEST_INVALID
IN3_ERR_CHAIN_NOT_FOUND = _libin3p.IN3_ERR_CHAIN_NOT_FOUND
IN3_ERR_NO_NODES_FOUND = _libin3p.IN3_ERR_NO_NODES_FOUND
IN3_ERR_CONFIG_ERROR = _libin3p.IN3_ERR_CONFIG_ERROR
IN3_ERR_MAX_ATTEMPTS = _libin3p.IN3_ERR_MAX_ATTEMPTS
CHAIN_ETH = _libin3p.CHAIN_ETH
CHAIN_SUBSTRATE = _libin3p.CHAIN_SUBSTRATE
CHAIN_IPFS = _libin3p.CHAIN_IPFS
CHAIN_BTC = _libin3p.CHAIN_BTC
CHAIN_IOTA = _libin3p.CHAIN_IOTA
CHAIN_GENERIC = _libin3p.CHAIN_GENERIC
PROOF_NONE = _libin3p.PROOF_NONE
PROOF_STANDARD = _libin3p.PROOF_STANDARD
PROOF_FULL = _libin3p.PROOF_FULL
VERIFICATION_NEVER = _libin3p.VERIFICATION_NEVER
VERIFICATION_PROOF = _libin3p.VERIFICATION_PROOF
VERIFICATION_PROOF_WITH_SIGNATURE = _libin3p.VERIFICATION_PROOF_WITH_SIGNATURE
class in3_request_config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_request_config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_request_config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chainId"] = _libin3p.in3_request_config_t_chainId_set
    __swig_getmethods__["chainId"] = _libin3p.in3_request_config_t_chainId_get
    if _newclass:
        chainId = _swig_property(_libin3p.in3_request_config_t_chainId_get, _libin3p.in3_request_config_t_chainId_set)
    __swig_setmethods__["includeCode"] = _libin3p.in3_request_config_t_includeCode_set
    __swig_getmethods__["includeCode"] = _libin3p.in3_request_config_t_includeCode_get
    if _newclass:
        includeCode = _swig_property(_libin3p.in3_request_config_t_includeCode_get, _libin3p.in3_request_config_t_includeCode_set)
    __swig_setmethods__["useFullProof"] = _libin3p.in3_request_config_t_useFullProof_set
    __swig_getmethods__["useFullProof"] = _libin3p.in3_request_config_t_useFullProof_get
    if _newclass:
        useFullProof = _swig_property(_libin3p.in3_request_config_t_useFullProof_get, _libin3p.in3_request_config_t_useFullProof_set)
    __swig_setmethods__["useBinary"] = _libin3p.in3_request_config_t_useBinary_set
    __swig_getmethods__["useBinary"] = _libin3p.in3_request_config_t_useBinary_get
    if _newclass:
        useBinary = _swig_property(_libin3p.in3_request_config_t_useBinary_get, _libin3p.in3_request_config_t_useBinary_set)
    __swig_setmethods__["verifiedHashes"] = _libin3p.in3_request_config_t_verifiedHashes_set
    __swig_getmethods__["verifiedHashes"] = _libin3p.in3_request_config_t_verifiedHashes_get
    if _newclass:
        verifiedHashes = _swig_property(_libin3p.in3_request_config_t_verifiedHashes_get, _libin3p.in3_request_config_t_verifiedHashes_set)
    __swig_setmethods__["verifiedHashesCount"] = _libin3p.in3_request_config_t_verifiedHashesCount_set
    __swig_getmethods__["verifiedHashesCount"] = _libin3p.in3_request_config_t_verifiedHashesCount_get
    if _newclass:
        verifiedHashesCount = _swig_property(_libin3p.in3_request_config_t_verifiedHashesCount_get, _libin3p.in3_request_config_t_verifiedHashesCount_set)
    __swig_setmethods__["latestBlock"] = _libin3p.in3_request_config_t_latestBlock_set
    __swig_getmethods__["latestBlock"] = _libin3p.in3_request_config_t_latestBlock_get
    if _newclass:
        latestBlock = _swig_property(_libin3p.in3_request_config_t_latestBlock_get, _libin3p.in3_request_config_t_latestBlock_set)
    __swig_setmethods__["finality"] = _libin3p.in3_request_config_t_finality_set
    __swig_getmethods__["finality"] = _libin3p.in3_request_config_t_finality_get
    if _newclass:
        finality = _swig_property(_libin3p.in3_request_config_t_finality_get, _libin3p.in3_request_config_t_finality_set)
    __swig_setmethods__["verification"] = _libin3p.in3_request_config_t_verification_set
    __swig_getmethods__["verification"] = _libin3p.in3_request_config_t_verification_get
    if _newclass:
        verification = _swig_property(_libin3p.in3_request_config_t_verification_get, _libin3p.in3_request_config_t_verification_set)
    __swig_setmethods__["clientSignature"] = _libin3p.in3_request_config_t_clientSignature_set
    __swig_getmethods__["clientSignature"] = _libin3p.in3_request_config_t_clientSignature_get
    if _newclass:
        clientSignature = _swig_property(_libin3p.in3_request_config_t_clientSignature_get, _libin3p.in3_request_config_t_clientSignature_set)
    __swig_setmethods__["signatures"] = _libin3p.in3_request_config_t_signatures_set
    __swig_getmethods__["signatures"] = _libin3p.in3_request_config_t_signatures_get
    if _newclass:
        signatures = _swig_property(_libin3p.in3_request_config_t_signatures_get, _libin3p.in3_request_config_t_signatures_set)
    __swig_setmethods__["signaturesCount"] = _libin3p.in3_request_config_t_signaturesCount_set
    __swig_getmethods__["signaturesCount"] = _libin3p.in3_request_config_t_signaturesCount_get
    if _newclass:
        signaturesCount = _swig_property(_libin3p.in3_request_config_t_signaturesCount_get, _libin3p.in3_request_config_t_signaturesCount_set)

    def __init__(self):
        this = _libin3p.new_in3_request_config_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_request_config_t
    __del__ = lambda self: None
in3_request_config_t_swigregister = _libin3p.in3_request_config_t_swigregister
in3_request_config_t_swigregister(in3_request_config_t)

class in3_node_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_node_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_node_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _libin3p.in3_node_t_index_set
    __swig_getmethods__["index"] = _libin3p.in3_node_t_index_get
    if _newclass:
        index = _swig_property(_libin3p.in3_node_t_index_get, _libin3p.in3_node_t_index_set)
    __swig_setmethods__["address"] = _libin3p.in3_node_t_address_set
    __swig_getmethods__["address"] = _libin3p.in3_node_t_address_get
    if _newclass:
        address = _swig_property(_libin3p.in3_node_t_address_get, _libin3p.in3_node_t_address_set)
    __swig_setmethods__["deposit"] = _libin3p.in3_node_t_deposit_set
    __swig_getmethods__["deposit"] = _libin3p.in3_node_t_deposit_get
    if _newclass:
        deposit = _swig_property(_libin3p.in3_node_t_deposit_get, _libin3p.in3_node_t_deposit_set)
    __swig_setmethods__["capacity"] = _libin3p.in3_node_t_capacity_set
    __swig_getmethods__["capacity"] = _libin3p.in3_node_t_capacity_get
    if _newclass:
        capacity = _swig_property(_libin3p.in3_node_t_capacity_get, _libin3p.in3_node_t_capacity_set)
    __swig_setmethods__["props"] = _libin3p.in3_node_t_props_set
    __swig_getmethods__["props"] = _libin3p.in3_node_t_props_get
    if _newclass:
        props = _swig_property(_libin3p.in3_node_t_props_get, _libin3p.in3_node_t_props_set)
    __swig_setmethods__["url"] = _libin3p.in3_node_t_url_set
    __swig_getmethods__["url"] = _libin3p.in3_node_t_url_get
    if _newclass:
        url = _swig_property(_libin3p.in3_node_t_url_get, _libin3p.in3_node_t_url_set)

    def __init__(self):
        this = _libin3p.new_in3_node_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_node_t
    __del__ = lambda self: None
in3_node_t_swigregister = _libin3p.in3_node_t_swigregister
in3_node_t_swigregister(in3_node_t)

class in3_node_weight_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_node_weight_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_node_weight_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _libin3p.in3_node_weight_t_weight_set
    __swig_getmethods__["weight"] = _libin3p.in3_node_weight_t_weight_get
    if _newclass:
        weight = _swig_property(_libin3p.in3_node_weight_t_weight_get, _libin3p.in3_node_weight_t_weight_set)
    __swig_setmethods__["response_count"] = _libin3p.in3_node_weight_t_response_count_set
    __swig_getmethods__["response_count"] = _libin3p.in3_node_weight_t_response_count_get
    if _newclass:
        response_count = _swig_property(_libin3p.in3_node_weight_t_response_count_get, _libin3p.in3_node_weight_t_response_count_set)
    __swig_setmethods__["total_response_time"] = _libin3p.in3_node_weight_t_total_response_time_set
    __swig_getmethods__["total_response_time"] = _libin3p.in3_node_weight_t_total_response_time_get
    if _newclass:
        total_response_time = _swig_property(_libin3p.in3_node_weight_t_total_response_time_get, _libin3p.in3_node_weight_t_total_response_time_set)
    __swig_setmethods__["blacklistedUntil"] = _libin3p.in3_node_weight_t_blacklistedUntil_set
    __swig_getmethods__["blacklistedUntil"] = _libin3p.in3_node_weight_t_blacklistedUntil_get
    if _newclass:
        blacklistedUntil = _swig_property(_libin3p.in3_node_weight_t_blacklistedUntil_get, _libin3p.in3_node_weight_t_blacklistedUntil_set)

    def __init__(self):
        this = _libin3p.new_in3_node_weight_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_node_weight_t
    __del__ = lambda self: None
in3_node_weight_t_swigregister = _libin3p.in3_node_weight_t_swigregister
in3_node_weight_t_swigregister(in3_node_weight_t)

class in3_chain_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_chain_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_chain_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chainId"] = _libin3p.in3_chain_t_chainId_set
    __swig_getmethods__["chainId"] = _libin3p.in3_chain_t_chainId_get
    if _newclass:
        chainId = _swig_property(_libin3p.in3_chain_t_chainId_get, _libin3p.in3_chain_t_chainId_set)
    __swig_setmethods__["type"] = _libin3p.in3_chain_t_type_set
    __swig_getmethods__["type"] = _libin3p.in3_chain_t_type_get
    if _newclass:
        type = _swig_property(_libin3p.in3_chain_t_type_get, _libin3p.in3_chain_t_type_set)
    __swig_setmethods__["lastBlock"] = _libin3p.in3_chain_t_lastBlock_set
    __swig_getmethods__["lastBlock"] = _libin3p.in3_chain_t_lastBlock_get
    if _newclass:
        lastBlock = _swig_property(_libin3p.in3_chain_t_lastBlock_get, _libin3p.in3_chain_t_lastBlock_set)
    __swig_setmethods__["needsUpdate"] = _libin3p.in3_chain_t_needsUpdate_set
    __swig_getmethods__["needsUpdate"] = _libin3p.in3_chain_t_needsUpdate_get
    if _newclass:
        needsUpdate = _swig_property(_libin3p.in3_chain_t_needsUpdate_get, _libin3p.in3_chain_t_needsUpdate_set)
    __swig_setmethods__["nodeListLength"] = _libin3p.in3_chain_t_nodeListLength_set
    __swig_getmethods__["nodeListLength"] = _libin3p.in3_chain_t_nodeListLength_get
    if _newclass:
        nodeListLength = _swig_property(_libin3p.in3_chain_t_nodeListLength_get, _libin3p.in3_chain_t_nodeListLength_set)
    __swig_setmethods__["nodeList"] = _libin3p.in3_chain_t_nodeList_set
    __swig_getmethods__["nodeList"] = _libin3p.in3_chain_t_nodeList_get
    if _newclass:
        nodeList = _swig_property(_libin3p.in3_chain_t_nodeList_get, _libin3p.in3_chain_t_nodeList_set)
    __swig_setmethods__["weights"] = _libin3p.in3_chain_t_weights_set
    __swig_getmethods__["weights"] = _libin3p.in3_chain_t_weights_get
    if _newclass:
        weights = _swig_property(_libin3p.in3_chain_t_weights_get, _libin3p.in3_chain_t_weights_set)
    __swig_setmethods__["initAddresses"] = _libin3p.in3_chain_t_initAddresses_set
    __swig_getmethods__["initAddresses"] = _libin3p.in3_chain_t_initAddresses_get
    if _newclass:
        initAddresses = _swig_property(_libin3p.in3_chain_t_initAddresses_get, _libin3p.in3_chain_t_initAddresses_set)
    __swig_setmethods__["contract"] = _libin3p.in3_chain_t_contract_set
    __swig_getmethods__["contract"] = _libin3p.in3_chain_t_contract_get
    if _newclass:
        contract = _swig_property(_libin3p.in3_chain_t_contract_get, _libin3p.in3_chain_t_contract_set)
    __swig_setmethods__["spec"] = _libin3p.in3_chain_t_spec_set
    __swig_getmethods__["spec"] = _libin3p.in3_chain_t_spec_get
    if _newclass:
        spec = _swig_property(_libin3p.in3_chain_t_spec_get, _libin3p.in3_chain_t_spec_set)

    def __init__(self):
        this = _libin3p.new_in3_chain_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_chain_t
    __del__ = lambda self: None
in3_chain_t_swigregister = _libin3p.in3_chain_t_swigregister
in3_chain_t_swigregister(in3_chain_t)

class in3_storage_handler_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_storage_handler_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_storage_handler_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["get_item"] = _libin3p.in3_storage_handler_t_get_item_set
    __swig_getmethods__["get_item"] = _libin3p.in3_storage_handler_t_get_item_get
    if _newclass:
        get_item = _swig_property(_libin3p.in3_storage_handler_t_get_item_get, _libin3p.in3_storage_handler_t_get_item_set)
    __swig_setmethods__["set_item"] = _libin3p.in3_storage_handler_t_set_item_set
    __swig_getmethods__["set_item"] = _libin3p.in3_storage_handler_t_set_item_get
    if _newclass:
        set_item = _swig_property(_libin3p.in3_storage_handler_t_set_item_get, _libin3p.in3_storage_handler_t_set_item_set)
    __swig_setmethods__["cptr"] = _libin3p.in3_storage_handler_t_cptr_set
    __swig_getmethods__["cptr"] = _libin3p.in3_storage_handler_t_cptr_get
    if _newclass:
        cptr = _swig_property(_libin3p.in3_storage_handler_t_cptr_get, _libin3p.in3_storage_handler_t_cptr_set)

    def __init__(self):
        this = _libin3p.new_in3_storage_handler_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_storage_handler_t
    __del__ = lambda self: None
in3_storage_handler_t_swigregister = _libin3p.in3_storage_handler_t_swigregister
in3_storage_handler_t_swigregister(in3_storage_handler_t)

IN3_SIGN_ERR_REJECTED = _libin3p.IN3_SIGN_ERR_REJECTED
IN3_SIGN_ERR_ACCOUNT_NOT_FOUND = _libin3p.IN3_SIGN_ERR_ACCOUNT_NOT_FOUND
IN3_SIGN_ERR_INVALID_MESSAGE = _libin3p.IN3_SIGN_ERR_INVALID_MESSAGE
IN3_SIGN_ERR_GENERAL_ERROR = _libin3p.IN3_SIGN_ERR_GENERAL_ERROR
IN3_DEBUG = _libin3p.IN3_DEBUG
SIGN_EC_RAW = _libin3p.SIGN_EC_RAW
SIGN_EC_HASH = _libin3p.SIGN_EC_HASH
class in3_signer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_signer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_signer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sign"] = _libin3p.in3_signer_t_sign_set
    __swig_getmethods__["sign"] = _libin3p.in3_signer_t_sign_get
    if _newclass:
        sign = _swig_property(_libin3p.in3_signer_t_sign_get, _libin3p.in3_signer_t_sign_set)
    __swig_setmethods__["wallet"] = _libin3p.in3_signer_t_wallet_set
    __swig_getmethods__["wallet"] = _libin3p.in3_signer_t_wallet_get
    if _newclass:
        wallet = _swig_property(_libin3p.in3_signer_t_wallet_get, _libin3p.in3_signer_t_wallet_set)

    def __init__(self):
        this = _libin3p.new_in3_signer_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_signer_t
    __del__ = lambda self: None
in3_signer_t_swigregister = _libin3p.in3_signer_t_swigregister
in3_signer_t_swigregister(in3_signer_t)

class in3_response_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_response_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_response_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error"] = _libin3p.in3_response_t_error_set
    __swig_getmethods__["error"] = _libin3p.in3_response_t_error_get
    if _newclass:
        error = _swig_property(_libin3p.in3_response_t_error_get, _libin3p.in3_response_t_error_set)
    __swig_setmethods__["result"] = _libin3p.in3_response_t_result_set
    __swig_getmethods__["result"] = _libin3p.in3_response_t_result_get
    if _newclass:
        result = _swig_property(_libin3p.in3_response_t_result_get, _libin3p.in3_response_t_result_set)

    def __init__(self):
        this = _libin3p.new_in3_response_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_response_t
    __del__ = lambda self: None
in3_response_t_swigregister = _libin3p.in3_response_t_swigregister
in3_response_t_swigregister(in3_response_t)

class in3_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, in3_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, in3_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cacheTimeout"] = _libin3p.in3_t_cacheTimeout_set
    __swig_getmethods__["cacheTimeout"] = _libin3p.in3_t_cacheTimeout_get
    if _newclass:
        cacheTimeout = _swig_property(_libin3p.in3_t_cacheTimeout_get, _libin3p.in3_t_cacheTimeout_set)
    __swig_setmethods__["nodeLimit"] = _libin3p.in3_t_nodeLimit_set
    __swig_getmethods__["nodeLimit"] = _libin3p.in3_t_nodeLimit_get
    if _newclass:
        nodeLimit = _swig_property(_libin3p.in3_t_nodeLimit_get, _libin3p.in3_t_nodeLimit_set)
    __swig_setmethods__["key"] = _libin3p.in3_t_key_set
    __swig_getmethods__["key"] = _libin3p.in3_t_key_get
    if _newclass:
        key = _swig_property(_libin3p.in3_t_key_get, _libin3p.in3_t_key_set)
    __swig_setmethods__["maxCodeCache"] = _libin3p.in3_t_maxCodeCache_set
    __swig_getmethods__["maxCodeCache"] = _libin3p.in3_t_maxCodeCache_get
    if _newclass:
        maxCodeCache = _swig_property(_libin3p.in3_t_maxCodeCache_get, _libin3p.in3_t_maxCodeCache_set)
    __swig_setmethods__["maxBlockCache"] = _libin3p.in3_t_maxBlockCache_set
    __swig_getmethods__["maxBlockCache"] = _libin3p.in3_t_maxBlockCache_get
    if _newclass:
        maxBlockCache = _swig_property(_libin3p.in3_t_maxBlockCache_get, _libin3p.in3_t_maxBlockCache_set)
    __swig_setmethods__["proof"] = _libin3p.in3_t_proof_set
    __swig_getmethods__["proof"] = _libin3p.in3_t_proof_get
    if _newclass:
        proof = _swig_property(_libin3p.in3_t_proof_get, _libin3p.in3_t_proof_set)
    __swig_setmethods__["requestCount"] = _libin3p.in3_t_requestCount_set
    __swig_getmethods__["requestCount"] = _libin3p.in3_t_requestCount_get
    if _newclass:
        requestCount = _swig_property(_libin3p.in3_t_requestCount_get, _libin3p.in3_t_requestCount_set)
    __swig_setmethods__["signatureCount"] = _libin3p.in3_t_signatureCount_set
    __swig_getmethods__["signatureCount"] = _libin3p.in3_t_signatureCount_get
    if _newclass:
        signatureCount = _swig_property(_libin3p.in3_t_signatureCount_get, _libin3p.in3_t_signatureCount_set)
    __swig_setmethods__["minDeposit"] = _libin3p.in3_t_minDeposit_set
    __swig_getmethods__["minDeposit"] = _libin3p.in3_t_minDeposit_get
    if _newclass:
        minDeposit = _swig_property(_libin3p.in3_t_minDeposit_get, _libin3p.in3_t_minDeposit_set)
    __swig_setmethods__["replaceLatestBlock"] = _libin3p.in3_t_replaceLatestBlock_set
    __swig_getmethods__["replaceLatestBlock"] = _libin3p.in3_t_replaceLatestBlock_get
    if _newclass:
        replaceLatestBlock = _swig_property(_libin3p.in3_t_replaceLatestBlock_get, _libin3p.in3_t_replaceLatestBlock_set)
    __swig_setmethods__["finality"] = _libin3p.in3_t_finality_set
    __swig_getmethods__["finality"] = _libin3p.in3_t_finality_get
    if _newclass:
        finality = _swig_property(_libin3p.in3_t_finality_get, _libin3p.in3_t_finality_set)
    __swig_setmethods__["max_attempts"] = _libin3p.in3_t_max_attempts_set
    __swig_getmethods__["max_attempts"] = _libin3p.in3_t_max_attempts_get
    if _newclass:
        max_attempts = _swig_property(_libin3p.in3_t_max_attempts_get, _libin3p.in3_t_max_attempts_set)
    __swig_setmethods__["timeout"] = _libin3p.in3_t_timeout_set
    __swig_getmethods__["timeout"] = _libin3p.in3_t_timeout_get
    if _newclass:
        timeout = _swig_property(_libin3p.in3_t_timeout_get, _libin3p.in3_t_timeout_set)
    __swig_setmethods__["chainId"] = _libin3p.in3_t_chainId_set
    __swig_getmethods__["chainId"] = _libin3p.in3_t_chainId_get
    if _newclass:
        chainId = _swig_property(_libin3p.in3_t_chainId_get, _libin3p.in3_t_chainId_set)
    __swig_setmethods__["autoUpdateList"] = _libin3p.in3_t_autoUpdateList_set
    __swig_getmethods__["autoUpdateList"] = _libin3p.in3_t_autoUpdateList_get
    if _newclass:
        autoUpdateList = _swig_property(_libin3p.in3_t_autoUpdateList_get, _libin3p.in3_t_autoUpdateList_set)
    __swig_setmethods__["cacheStorage"] = _libin3p.in3_t_cacheStorage_set
    __swig_getmethods__["cacheStorage"] = _libin3p.in3_t_cacheStorage_get
    if _newclass:
        cacheStorage = _swig_property(_libin3p.in3_t_cacheStorage_get, _libin3p.in3_t_cacheStorage_set)
    __swig_setmethods__["signer"] = _libin3p.in3_t_signer_set
    __swig_getmethods__["signer"] = _libin3p.in3_t_signer_get
    if _newclass:
        signer = _swig_property(_libin3p.in3_t_signer_get, _libin3p.in3_t_signer_set)
    __swig_setmethods__["transport"] = _libin3p.in3_t_transport_set
    __swig_getmethods__["transport"] = _libin3p.in3_t_transport_get
    if _newclass:
        transport = _swig_property(_libin3p.in3_t_transport_get, _libin3p.in3_t_transport_set)
    __swig_setmethods__["includeCode"] = _libin3p.in3_t_includeCode_set
    __swig_getmethods__["includeCode"] = _libin3p.in3_t_includeCode_get
    if _newclass:
        includeCode = _swig_property(_libin3p.in3_t_includeCode_get, _libin3p.in3_t_includeCode_set)
    __swig_setmethods__["use_binary"] = _libin3p.in3_t_use_binary_set
    __swig_getmethods__["use_binary"] = _libin3p.in3_t_use_binary_get
    if _newclass:
        use_binary = _swig_property(_libin3p.in3_t_use_binary_get, _libin3p.in3_t_use_binary_set)
    __swig_setmethods__["use_http"] = _libin3p.in3_t_use_http_set
    __swig_getmethods__["use_http"] = _libin3p.in3_t_use_http_get
    if _newclass:
        use_http = _swig_property(_libin3p.in3_t_use_http_get, _libin3p.in3_t_use_http_set)
    __swig_setmethods__["chains"] = _libin3p.in3_t_chains_set
    __swig_getmethods__["chains"] = _libin3p.in3_t_chains_get
    if _newclass:
        chains = _swig_property(_libin3p.in3_t_chains_get, _libin3p.in3_t_chains_set)
    __swig_setmethods__["chainsCount"] = _libin3p.in3_t_chainsCount_set
    __swig_getmethods__["chainsCount"] = _libin3p.in3_t_chainsCount_get
    if _newclass:
        chainsCount = _swig_property(_libin3p.in3_t_chainsCount_get, _libin3p.in3_t_chainsCount_set)
    __swig_setmethods__["evm_flags"] = _libin3p.in3_t_evm_flags_set
    __swig_getmethods__["evm_flags"] = _libin3p.in3_t_evm_flags_get
    if _newclass:
        evm_flags = _swig_property(_libin3p.in3_t_evm_flags_get, _libin3p.in3_t_evm_flags_set)
    __swig_setmethods__["mock"] = _libin3p.in3_t_mock_set
    __swig_getmethods__["mock"] = _libin3p.in3_t_mock_get
    if _newclass:
        mock = _swig_property(_libin3p.in3_t_mock_get, _libin3p.in3_t_mock_set)

    def __init__(self):
        this = _libin3p.new_in3_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_in3_t
    __del__ = lambda self: None
in3_t_swigregister = _libin3p.in3_t_swigregister
in3_t_swigregister(in3_t)


def in3_new():
    return _libin3p.in3_new()
in3_new = _libin3p.in3_new

def in3_client_rpc(c, method, params, result, error):
    return _libin3p.in3_client_rpc(c, method, params, result, error)
in3_client_rpc = _libin3p.in3_client_rpc

def in3_free(a):
    return _libin3p.in3_free(a)
in3_free = _libin3p.in3_free

def in3_client_rpc_raw(c, method, params, wrapper):
    return _libin3p.in3_client_rpc_raw(c, method, params, wrapper)
in3_client_rpc_raw = _libin3p.in3_client_rpc_raw
class uint256_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint256_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint256_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libin3p.uint256_t_data_set
    __swig_getmethods__["data"] = _libin3p.uint256_t_data_get
    if _newclass:
        data = _swig_property(_libin3p.uint256_t_data_get, _libin3p.uint256_t_data_set)

    def __init__(self):
        this = _libin3p.new_uint256_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_uint256_t
    __del__ = lambda self: None
uint256_t_swigregister = _libin3p.uint256_t_swigregister
uint256_t_swigregister(uint256_t)

class eth_tx_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eth_tx_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eth_tx_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hash"] = _libin3p.eth_tx_t_hash_set
    __swig_getmethods__["hash"] = _libin3p.eth_tx_t_hash_get
    if _newclass:
        hash = _swig_property(_libin3p.eth_tx_t_hash_get, _libin3p.eth_tx_t_hash_set)
    __swig_setmethods__["block_hash"] = _libin3p.eth_tx_t_block_hash_set
    __swig_getmethods__["block_hash"] = _libin3p.eth_tx_t_block_hash_get
    if _newclass:
        block_hash = _swig_property(_libin3p.eth_tx_t_block_hash_get, _libin3p.eth_tx_t_block_hash_set)
    __swig_setmethods__["block_number"] = _libin3p.eth_tx_t_block_number_set
    __swig_getmethods__["block_number"] = _libin3p.eth_tx_t_block_number_get
    if _newclass:
        block_number = _swig_property(_libin3p.eth_tx_t_block_number_get, _libin3p.eth_tx_t_block_number_set)
    __swig_setmethods__["_from"] = _libin3p.eth_tx_t__from_set
    __swig_getmethods__["_from"] = _libin3p.eth_tx_t__from_get
    if _newclass:
        _from = _swig_property(_libin3p.eth_tx_t__from_get, _libin3p.eth_tx_t__from_set)
    __swig_setmethods__["gas"] = _libin3p.eth_tx_t_gas_set
    __swig_getmethods__["gas"] = _libin3p.eth_tx_t_gas_get
    if _newclass:
        gas = _swig_property(_libin3p.eth_tx_t_gas_get, _libin3p.eth_tx_t_gas_set)
    __swig_setmethods__["gas_price"] = _libin3p.eth_tx_t_gas_price_set
    __swig_getmethods__["gas_price"] = _libin3p.eth_tx_t_gas_price_get
    if _newclass:
        gas_price = _swig_property(_libin3p.eth_tx_t_gas_price_get, _libin3p.eth_tx_t_gas_price_set)
    __swig_setmethods__["data"] = _libin3p.eth_tx_t_data_set
    __swig_getmethods__["data"] = _libin3p.eth_tx_t_data_get
    if _newclass:
        data = _swig_property(_libin3p.eth_tx_t_data_get, _libin3p.eth_tx_t_data_set)
    __swig_setmethods__["nonce"] = _libin3p.eth_tx_t_nonce_set
    __swig_getmethods__["nonce"] = _libin3p.eth_tx_t_nonce_get
    if _newclass:
        nonce = _swig_property(_libin3p.eth_tx_t_nonce_get, _libin3p.eth_tx_t_nonce_set)
    __swig_setmethods__["to"] = _libin3p.eth_tx_t_to_set
    __swig_getmethods__["to"] = _libin3p.eth_tx_t_to_get
    if _newclass:
        to = _swig_property(_libin3p.eth_tx_t_to_get, _libin3p.eth_tx_t_to_set)
    __swig_setmethods__["value"] = _libin3p.eth_tx_t_value_set
    __swig_getmethods__["value"] = _libin3p.eth_tx_t_value_get
    if _newclass:
        value = _swig_property(_libin3p.eth_tx_t_value_get, _libin3p.eth_tx_t_value_set)
    __swig_setmethods__["transaction_index"] = _libin3p.eth_tx_t_transaction_index_set
    __swig_getmethods__["transaction_index"] = _libin3p.eth_tx_t_transaction_index_get
    if _newclass:
        transaction_index = _swig_property(_libin3p.eth_tx_t_transaction_index_get, _libin3p.eth_tx_t_transaction_index_set)
    __swig_setmethods__["signature"] = _libin3p.eth_tx_t_signature_set
    __swig_getmethods__["signature"] = _libin3p.eth_tx_t_signature_get
    if _newclass:
        signature = _swig_property(_libin3p.eth_tx_t_signature_get, _libin3p.eth_tx_t_signature_set)

    def __init__(self):
        this = _libin3p.new_eth_tx_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_eth_tx_t
    __del__ = lambda self: None
eth_tx_t_swigregister = _libin3p.eth_tx_t_swigregister
eth_tx_t_swigregister(eth_tx_t)

class eth_block_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eth_block_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eth_block_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number"] = _libin3p.eth_block_t_number_set
    __swig_getmethods__["number"] = _libin3p.eth_block_t_number_get
    if _newclass:
        number = _swig_property(_libin3p.eth_block_t_number_get, _libin3p.eth_block_t_number_set)
    __swig_setmethods__["hash"] = _libin3p.eth_block_t_hash_set
    __swig_getmethods__["hash"] = _libin3p.eth_block_t_hash_get
    if _newclass:
        hash = _swig_property(_libin3p.eth_block_t_hash_get, _libin3p.eth_block_t_hash_set)
    __swig_setmethods__["gasUsed"] = _libin3p.eth_block_t_gasUsed_set
    __swig_getmethods__["gasUsed"] = _libin3p.eth_block_t_gasUsed_get
    if _newclass:
        gasUsed = _swig_property(_libin3p.eth_block_t_gasUsed_get, _libin3p.eth_block_t_gasUsed_set)
    __swig_setmethods__["gasLimit"] = _libin3p.eth_block_t_gasLimit_set
    __swig_getmethods__["gasLimit"] = _libin3p.eth_block_t_gasLimit_get
    if _newclass:
        gasLimit = _swig_property(_libin3p.eth_block_t_gasLimit_get, _libin3p.eth_block_t_gasLimit_set)
    __swig_setmethods__["author"] = _libin3p.eth_block_t_author_set
    __swig_getmethods__["author"] = _libin3p.eth_block_t_author_get
    if _newclass:
        author = _swig_property(_libin3p.eth_block_t_author_get, _libin3p.eth_block_t_author_set)
    __swig_setmethods__["difficulty"] = _libin3p.eth_block_t_difficulty_set
    __swig_getmethods__["difficulty"] = _libin3p.eth_block_t_difficulty_get
    if _newclass:
        difficulty = _swig_property(_libin3p.eth_block_t_difficulty_get, _libin3p.eth_block_t_difficulty_set)
    __swig_setmethods__["extra_data"] = _libin3p.eth_block_t_extra_data_set
    __swig_getmethods__["extra_data"] = _libin3p.eth_block_t_extra_data_get
    if _newclass:
        extra_data = _swig_property(_libin3p.eth_block_t_extra_data_get, _libin3p.eth_block_t_extra_data_set)
    __swig_setmethods__["logsBloom"] = _libin3p.eth_block_t_logsBloom_set
    __swig_getmethods__["logsBloom"] = _libin3p.eth_block_t_logsBloom_get
    if _newclass:
        logsBloom = _swig_property(_libin3p.eth_block_t_logsBloom_get, _libin3p.eth_block_t_logsBloom_set)
    __swig_setmethods__["parent_hash"] = _libin3p.eth_block_t_parent_hash_set
    __swig_getmethods__["parent_hash"] = _libin3p.eth_block_t_parent_hash_get
    if _newclass:
        parent_hash = _swig_property(_libin3p.eth_block_t_parent_hash_get, _libin3p.eth_block_t_parent_hash_set)
    __swig_setmethods__["sha3_uncles"] = _libin3p.eth_block_t_sha3_uncles_set
    __swig_getmethods__["sha3_uncles"] = _libin3p.eth_block_t_sha3_uncles_get
    if _newclass:
        sha3_uncles = _swig_property(_libin3p.eth_block_t_sha3_uncles_get, _libin3p.eth_block_t_sha3_uncles_set)
    __swig_setmethods__["state_root"] = _libin3p.eth_block_t_state_root_set
    __swig_getmethods__["state_root"] = _libin3p.eth_block_t_state_root_get
    if _newclass:
        state_root = _swig_property(_libin3p.eth_block_t_state_root_get, _libin3p.eth_block_t_state_root_set)
    __swig_setmethods__["receipts_root"] = _libin3p.eth_block_t_receipts_root_set
    __swig_getmethods__["receipts_root"] = _libin3p.eth_block_t_receipts_root_get
    if _newclass:
        receipts_root = _swig_property(_libin3p.eth_block_t_receipts_root_get, _libin3p.eth_block_t_receipts_root_set)
    __swig_setmethods__["transaction_root"] = _libin3p.eth_block_t_transaction_root_set
    __swig_getmethods__["transaction_root"] = _libin3p.eth_block_t_transaction_root_get
    if _newclass:
        transaction_root = _swig_property(_libin3p.eth_block_t_transaction_root_get, _libin3p.eth_block_t_transaction_root_set)
    __swig_setmethods__["tx_count"] = _libin3p.eth_block_t_tx_count_set
    __swig_getmethods__["tx_count"] = _libin3p.eth_block_t_tx_count_get
    if _newclass:
        tx_count = _swig_property(_libin3p.eth_block_t_tx_count_get, _libin3p.eth_block_t_tx_count_set)
    __swig_setmethods__["tx_data"] = _libin3p.eth_block_t_tx_data_set
    __swig_getmethods__["tx_data"] = _libin3p.eth_block_t_tx_data_get
    if _newclass:
        tx_data = _swig_property(_libin3p.eth_block_t_tx_data_get, _libin3p.eth_block_t_tx_data_set)
    __swig_setmethods__["tx_hashes"] = _libin3p.eth_block_t_tx_hashes_set
    __swig_getmethods__["tx_hashes"] = _libin3p.eth_block_t_tx_hashes_get
    if _newclass:
        tx_hashes = _swig_property(_libin3p.eth_block_t_tx_hashes_get, _libin3p.eth_block_t_tx_hashes_set)
    __swig_setmethods__["timestamp"] = _libin3p.eth_block_t_timestamp_set
    __swig_getmethods__["timestamp"] = _libin3p.eth_block_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_libin3p.eth_block_t_timestamp_get, _libin3p.eth_block_t_timestamp_set)
    __swig_setmethods__["seal_fields"] = _libin3p.eth_block_t_seal_fields_set
    __swig_getmethods__["seal_fields"] = _libin3p.eth_block_t_seal_fields_get
    if _newclass:
        seal_fields = _swig_property(_libin3p.eth_block_t_seal_fields_get, _libin3p.eth_block_t_seal_fields_set)
    __swig_setmethods__["seal_fields_count"] = _libin3p.eth_block_t_seal_fields_count_set
    __swig_getmethods__["seal_fields_count"] = _libin3p.eth_block_t_seal_fields_count_get
    if _newclass:
        seal_fields_count = _swig_property(_libin3p.eth_block_t_seal_fields_count_get, _libin3p.eth_block_t_seal_fields_count_set)

    def __init__(self):
        this = _libin3p.new_eth_block_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_eth_block_t
    __del__ = lambda self: None
eth_block_t_swigregister = _libin3p.eth_block_t_swigregister
eth_block_t_swigregister(eth_block_t)


def eth_getStorageAt(in3, account, key, block):
    return _libin3p.eth_getStorageAt(in3, account, key, block)
eth_getStorageAt = _libin3p.eth_getStorageAt

def eth_getCode(in3, account, block):
    return _libin3p.eth_getCode(in3, account, block)
eth_getCode = _libin3p.eth_getCode

def eth_getBalance(in3, account, block):
    return _libin3p.eth_getBalance(in3, account, block)
eth_getBalance = _libin3p.eth_getBalance

def eth_blockNumber(in3):
    return _libin3p.eth_blockNumber(in3)
eth_blockNumber = _libin3p.eth_blockNumber

def eth_gasPrice(in3):
    return _libin3p.eth_gasPrice(in3)
eth_gasPrice = _libin3p.eth_gasPrice

def eth_getBlockByNumber(in3, number, include_tx):
    return _libin3p.eth_getBlockByNumber(in3, number, include_tx)
eth_getBlockByNumber = _libin3p.eth_getBlockByNumber

def eth_getBlockByHash(in3, hash, include_tx):
    return _libin3p.eth_getBlockByHash(in3, hash, include_tx)
eth_getBlockByHash = _libin3p.eth_getBlockByHash

def eth_call_fn(in3, contract, fn_sig):
    return _libin3p.eth_call_fn(in3, contract, fn_sig)
eth_call_fn = _libin3p.eth_call_fn

def eth_wait_for_receipt(in3, tx_hash):
    return _libin3p.eth_wait_for_receipt(in3, tx_hash)
eth_wait_for_receipt = _libin3p.eth_wait_for_receipt

def eth_last_error():
    return _libin3p.eth_last_error()
eth_last_error = _libin3p.eth_last_error

def as_double(d):
    return _libin3p.as_double(d)
as_double = _libin3p.as_double

def as_long(d):
    return _libin3p.as_long(d)
as_long = _libin3p.as_long
class json_ctx_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, json_ctx_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, json_ctx_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _libin3p.json_ctx_t_result_set
    __swig_getmethods__["result"] = _libin3p.json_ctx_t_result_get
    if _newclass:
        result = _swig_property(_libin3p.json_ctx_t_result_get, _libin3p.json_ctx_t_result_set)
    __swig_setmethods__["allocated"] = _libin3p.json_ctx_t_allocated_set
    __swig_getmethods__["allocated"] = _libin3p.json_ctx_t_allocated_get
    if _newclass:
        allocated = _swig_property(_libin3p.json_ctx_t_allocated_get, _libin3p.json_ctx_t_allocated_set)
    __swig_setmethods__["len"] = _libin3p.json_ctx_t_len_set
    __swig_getmethods__["len"] = _libin3p.json_ctx_t_len_get
    if _newclass:
        len = _swig_property(_libin3p.json_ctx_t_len_get, _libin3p.json_ctx_t_len_set)
    __swig_setmethods__["c"] = _libin3p.json_ctx_t_c_set
    __swig_getmethods__["c"] = _libin3p.json_ctx_t_c_get
    if _newclass:
        c = _swig_property(_libin3p.json_ctx_t_c_get, _libin3p.json_ctx_t_c_set)

    def __init__(self):
        this = _libin3p.new_json_ctx_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libin3p.delete_json_ctx_t
    __del__ = lambda self: None
json_ctx_t_swigregister = _libin3p.json_ctx_t_swigregister
json_ctx_t_swigregister(json_ctx_t)


def new_intp():
    return _libin3p.new_intp()
new_intp = _libin3p.new_intp

def copy_intp(value):
    return _libin3p.copy_intp(value)
copy_intp = _libin3p.copy_intp

def delete_intp(obj):
    return _libin3p.delete_intp(obj)
delete_intp = _libin3p.delete_intp

def intp_assign(obj, value):
    return _libin3p.intp_assign(obj, value)
intp_assign = _libin3p.intp_assign

def intp_value(obj):
    return _libin3p.intp_value(obj)
intp_value = _libin3p.intp_value

def new_charp():
    return _libin3p.new_charp()
new_charp = _libin3p.new_charp

def copy_charp(value):
    return _libin3p.copy_charp(value)
copy_charp = _libin3p.copy_charp

def delete_charp(obj):
    return _libin3p.delete_charp(obj)
delete_charp = _libin3p.delete_charp

def charp_assign(obj, value):
    return _libin3p.charp_assign(obj, value)
charp_assign = _libin3p.charp_assign

def charp_value(obj):
    return _libin3p.charp_value(obj)
charp_value = _libin3p.charp_value

def new_in3p():
    return _libin3p.new_in3p()
new_in3p = _libin3p.new_in3p

def copy_in3p(value):
    return _libin3p.copy_in3p(value)
copy_in3p = _libin3p.copy_in3p

def delete_in3p(obj):
    return _libin3p.delete_in3p(obj)
delete_in3p = _libin3p.delete_in3p

def in3p_assign(obj, value):
    return _libin3p.in3p_assign(obj, value)
in3p_assign = _libin3p.in3p_assign

def in3p_value(obj):
    return _libin3p.in3p_value(obj)
in3p_value = _libin3p.in3p_value

def new_WrapperCallp():
    return _libin3p.new_WrapperCallp()
new_WrapperCallp = _libin3p.new_WrapperCallp

def copy_WrapperCallp(value):
    return _libin3p.copy_WrapperCallp(value)
copy_WrapperCallp = _libin3p.copy_WrapperCallp

def delete_WrapperCallp(obj):
    return _libin3p.delete_WrapperCallp(obj)
delete_WrapperCallp = _libin3p.delete_WrapperCallp

def WrapperCallp_assign(obj, value):
    return _libin3p.WrapperCallp_assign(obj, value)
WrapperCallp_assign = _libin3p.WrapperCallp_assign

def WrapperCallp_value(obj):
    return _libin3p.WrapperCallp_value(obj)
WrapperCallp_value = _libin3p.WrapperCallp_value

def new_uint8_tp():
    return _libin3p.new_uint8_tp()
new_uint8_tp = _libin3p.new_uint8_tp

def copy_uint8_tp(value):
    return _libin3p.copy_uint8_tp(value)
copy_uint8_tp = _libin3p.copy_uint8_tp

def delete_uint8_tp(obj):
    return _libin3p.delete_uint8_tp(obj)
delete_uint8_tp = _libin3p.delete_uint8_tp

def uint8_tp_assign(obj, value):
    return _libin3p.uint8_tp_assign(obj, value)
uint8_tp_assign = _libin3p.uint8_tp_assign

def uint8_tp_value(obj):
    return _libin3p.uint8_tp_value(obj)
uint8_tp_value = _libin3p.uint8_tp_value

def new_eth_block_tp():
    return _libin3p.new_eth_block_tp()
new_eth_block_tp = _libin3p.new_eth_block_tp

def copy_eth_block_tp(value):
    return _libin3p.copy_eth_block_tp(value)
copy_eth_block_tp = _libin3p.copy_eth_block_tp

def delete_eth_block_tp(obj):
    return _libin3p.delete_eth_block_tp(obj)
delete_eth_block_tp = _libin3p.delete_eth_block_tp

def eth_block_tp_assign(obj, value):
    return _libin3p.eth_block_tp_assign(obj, value)
eth_block_tp_assign = _libin3p.eth_block_tp_assign

def eth_block_tp_value(obj):
    return _libin3p.eth_block_tp_value(obj)
eth_block_tp_value = _libin3p.eth_block_tp_value

def new_json_ctx_tp():
    return _libin3p.new_json_ctx_tp()
new_json_ctx_tp = _libin3p.new_json_ctx_tp

def copy_json_ctx_tp(value):
    return _libin3p.copy_json_ctx_tp(value)
copy_json_ctx_tp = _libin3p.copy_json_ctx_tp

def delete_json_ctx_tp(obj):
    return _libin3p.delete_json_ctx_tp(obj)
delete_json_ctx_tp = _libin3p.delete_json_ctx_tp

def json_ctx_tp_assign(obj, value):
    return _libin3p.json_ctx_tp_assign(obj, value)
json_ctx_tp_assign = _libin3p.json_ctx_tp_assign

def json_ctx_tp_value(obj):
    return _libin3p.json_ctx_tp_value(obj)
json_ctx_tp_value = _libin3p.json_ctx_tp_value
# This file is compatible with both classic and new-style classes.


